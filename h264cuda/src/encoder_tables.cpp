/* ##################################################################### */ 
/*                                                                       */ 
/* Notice:   COPYRIGHT (C) GPU,GROUP. 2010                  */ 
/*           THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPU GROUP        */ 
/*           THE PROGRAM MAY ONLY     */ 
/*           BE USED IN A MANNER EXPLICITLY SPECIFIED IN THE GPU,       */ 
/*           WHICH INCLUDES LIMITATIONS ON COPYING, MODIFYING,           */ 
/*           REDISTRIBUTION AND WARANTIES. UNAUTHORIZED USE OF THIS      */ 
/*           PROGRAM IS SCTRICTLY PROHIBITED.                     */ 
/* ##################################################################### */ 

#include "../inc/const_defines.h"
#include "../inc/encoder_tables.h"

const int QP2QUANT_NEW[52]=
{
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 4, 4, 4, 5, 6,
        6, 7, 8, 9,10,11,13,14,
        16,18,20,23,25,29,32,36,
        40,45,51,57,64,72,81,91
};


//////////////////////////////////////////////////////////////////////////
// Tables for transform

short QuantTable[6][16] = 
{
  {13107, 8066, 13107, 8066, 8066, 5243, 8066, 5243, 13107, 8066, 13107, 8066, 8066, 5243, 8066, 5243},
  {11916, 7490, 11916, 7490, 7490, 4660, 7490, 4660, 11916, 7490, 11916, 7490, 7490, 4660, 7490, 4660},
  {10082, 6554, 10082, 6554, 6554, 4194, 6554, 4194, 10082, 6554, 10082, 6554, 6554, 4194, 6554, 4194},
  {9362,  5825,  9362, 5825, 5825, 3647, 5825, 3647, 9362,  5825,  9362, 5825, 5825, 3647, 5825, 3647},
  {8192,  5243,  8192, 5243, 5243, 3355, 5243, 3355, 8192,  5243,  8192, 5243, 5243, 3355, 5243, 3355},
  {7282,  4559,  7282, 4559, 4559, 2893, 4559, 2893, 7282,  4559,  7282, 4559, 4559, 2893, 4559, 2893}
};

short DQuantTable[6][16] =   // Field de-quant is a different table. See FIELD_DQUANT of vsofts code
{
    {10, 13, 10, 13, 13, 16, 13, 16, 10, 13, 10, 13, 13, 16, 13, 16},
    {11, 14, 11, 14, 14, 18, 14, 18, 11, 14, 11, 14, 14, 18, 14, 18},
	{13, 16, 13, 16, 16, 20, 16, 20, 13, 16, 13, 16, 16, 20, 16, 20},
	{14, 18, 14, 18, 18, 23, 18, 23, 14, 18, 14, 18, 18, 23, 18, 23},
	{16, 20, 16, 20, 20, 25, 20, 25, 16, 20, 16, 20, 20, 25, 20, 25},
	{18, 23, 18, 23, 23, 29, 23, 29, 18, 23, 18, 23, 23, 29, 23, 29}
};

const int FValIntra[] =
{
	10922, 21845, 43690, 87381, 174762, 349525,699050,1398101,2796202,5592405,11184810
};

const int FValInter[] =
{
	5461, 10922, 21845, 43690, 87381, 174762, 349525,699050,1398101,2796202,5592405,11184810
};


//////////////////////////////////////////////////////////////////////////
// Tables for QP-related calulations

const unsigned char QP_TO_CHROMA_MAPPING[NUM_QP]=
    {
        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 34,
        35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39
    };


const unsigned char mod_6[] = {
0,1,2,3,4,5,  0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5,
0,1,2,3,4,5,  0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5 };


const unsigned char div_6[] = {
0,0,0,0,0,0,  1,1,1,1,1,1, 2,2,2,2,2,2, 3,3,3,3,3,3, 4,4,4,4,4,4,
5,5,5,5,5,5,  6,6,6,6,6,6, 7,7,7,7,7,7, 8,8,8,8,8,8, 9,9,9,9,9,9 };


//////////////////////////////////////////////////////////////////////////
// The following two tables are for the loop filter kernel code.

// This table consists of four tables of length NUM_QP, all indexed by
// indexA in the standard
//   Table 0: a (alpha)
//   Table 1: tC0 for bS=1
//   Table 2: tC0 for bS=2
//   Table 3: tC0 for bS=3
const unsigned char IndexATable[NUM_QP][4] =
    {
        {0,0,0,0},     {0,0,0,0},      {0,0,0,0},      {0,0,0,0},
        {0,0,0,0},     {0,0,0,0},      {0,0,0,0},      {0,0,0,0},
        {0,0,0,0},     {0,0,0,0},      {0,0,0,0},      {0,0,0,0},
        {0,0,0,0},     {0,0,0,0},      {0,0,0,0},      {0,0,0,0},
        {4,0,0,0},     {4,0,0,1},      {5,0,0,1},      {6,0,0,1},
        {7,0,0,1},     {8,0,1,1},      {9,0,1,1},      {10,1,1,1},
        {12,1,1,1},    {13,1,1,1},     {15,1,1,1},     {17,1,1,2},
        {20,1,1,2},    {22,1,1,2},     {25,1,1,2},     {28,1,2,3},
        {32,1,2,3},    {36,2,2,3},     {40,2,2,4},     {45,2,3,4},
        {50,2,3,4},    {56,3,3,5},     {63,3,4,6},     {71,3,4,6},
        {80,4,5,7},    {90,4,5,8},     {101,4,6,9},    {113,5,7,10},
        {127,6,8,11},  {144,6,8,13},   {162,7,10,14},  {182,8,11,16},
        {203,9,12,18}, {226,10,13,20}, {255,11,15,23}, {255,13,17,25},
    };

// Table for B (beta)
const unsigned char IndexBTable[NUM_QP] =
    {
        0,  0,  0,  0, 
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  2,  2,  2,  3,
        3,  3,  3,  4,  4,  4,  6,  6,
        7,  7,  8,  8,  9,  9,  10, 10,
        11, 11, 12, 12, 13, 13, 14, 14,
        15, 15, 16, 16, 17, 17, 18, 18,
    };
//////////////////////////////////////////////////////////////////////////
// The following three tables are for the loop filter reference code.

const unsigned char ALPHA_TABLE[NUM_QP] =
    {
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   4,   4,   5,   6,
        7,   8,   9,   10,  12,  13,  15,  17,
        20,  22,  25,  28,  32,  36,  40,  45,
        50,  56,  63,  71,  80,  90,  101, 113,
        127, 144, 162, 182, 203, 226, 255, 255
    };

const unsigned char BETA_TABLE[NUM_QP] =
    {
        0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0,
        0,  0,  0,  0,  2,  2,  2,  3,
        3,  3,  3,  4,  4,  4,  6,  6,
        7,  7,  8,  8,  9,  9,  10, 10,
        11, 11, 12, 12, 13, 13, 14, 14,
        15, 15, 16, 16, 17, 17, 18, 18
    };

const unsigned char CLIP_TAB[NUM_QP][5]  =
    {
        {0,0,0,0,0},    {0,0,0,0,0},     {0,0,0,0,0},     {0,0,0,0,0},
        {0,0,0,0,0},    {0,0,0,0,0},     {0,0,0,0,0},     {0,0,0,0,0},
        {0,0,0,0,0},    {0,0,0,0,0},     {0,0,0,0,0},     {0,0,0,0,0},
        {0,0,0,0,0},    {0,0,0,0,0},     {0,0,0,0,0},     {0,0,0,0,0},
        {0,0,0,0,0},    {0,0,0,1,1},     {0,0,0,1,1},     {0,0,0,1,1},
        {0,0,0,1,1},    {0,0,1,1,1},     {0,0,1,1,1},     {0,1,1,1,1},
        {0,1,1,1,1},    {0,1,1,1,1},     {0,1,1,1,1},     {0,1,1,2,2},
        {0,1,1,2,2},    {0,1,1,2,2},     {0,1,1,2,2},     {0,1,2,3,3},
        {0,1,2,3,3},    {0,2,2,3,3},     {0,2,2,4,4},     {0,2,3,4,4},
        {0,2,3,4,4},    {0,3,3,5,5},     {0,3,4,6,6},     {0,3,4,6,6},
        {0,4,5,7,7},    {0,4,5,8,8},     {0,4,6,9,9},     {0,5,7,10,10},
        {0,6,8,11,11},  {0,6,8,13,13},   {0,7,10,14,14},  {0,8,11,16,16},
        {0,9,12,18,18}, {0,10,13,20,20}, {0,11,15,23,23}, {0,13,17,25,25}
    };


//////////////////////////////////////////////////////////////////////////
// This table contains the zig-zag order mapping for CAVLC.  The ith
// element of the output zig-zag'd block should be the same value as
// the element in the input block at location ZigZagScan[i].
const unsigned int ZigZagScan[16] = { 0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15 };
const unsigned int BlockScan[16] = { 0, 1, 4, 5, 2, 3, 6, 7, 8, 9, 12, 13, 10, 11, 14, 15 };


//////////////////////////////////////////////////////////////////////////
// CAVLC Tables
const unsigned char CoeffTokenTable[3][4][17][2] = 
    {
        { 
            {{ 1, 1},{ 6, 5},{ 8, 7},{ 9, 7},{10, 7},{11, 7},{13,15},{13,11},{13, 8},{14,15},{14,11},{15,15},{15,11},{16,15},{16,11},{16, 7},{16, 4}},
            {{ 0, 0},{ 2, 1},{ 6, 4},{ 8, 6},{ 9, 6},{10, 6},{11, 6},{13,14},{13,10},{14,14},{14,10},{15,14},{15,10},{15, 1},{16,14},{16,10},{16, 6}},
            {{ 0, 0},{ 0, 0},{ 3, 1},{ 7, 5},{ 8, 5},{ 9, 5},{10, 5},{11, 5},{13,13},{13, 9},{14,13},{14, 9},{15,13},{15, 9},{16,13},{16, 9},{16, 5}},
            {{ 0, 0},{ 0, 0},{ 0, 0},{ 5, 3},{ 6, 3},{ 7, 4},{ 8, 4},{ 9, 4},{10, 4},{11, 4},{13,12},{14,12},{14, 8},{15,12},{15, 8},{16,12},{16, 8}},
        },                                                 
        {                                                  
            {{ 2, 3},{ 6,11},{ 6, 7},{ 7, 7},{ 8, 7},{ 8, 4},{ 9, 7},{11,15},{11,11},{12,15},{12,11},{12, 8},{13,15},{13,11},{13, 7},{14, 9},{14, 7}},
            {{ 0, 0},{ 2, 2},{ 5, 7},{ 6,10},{ 6, 6},{ 7, 6},{ 8, 6},{ 9, 6},{11,14},{11,10},{12,14},{12,10},{13,14},{13,10},{14,11},{14, 8},{14, 6}},
            {{ 0, 0},{ 0, 0},{ 3, 3},{ 6, 9},{ 6, 5},{ 7, 5},{ 8, 5},{ 9, 5},{11,13},{11, 9},{12,13},{12, 9},{13,13},{13, 9},{13, 6},{14,10},{14, 5}},
            {{ 0, 0},{ 0, 0},{ 0, 0},{ 4, 5},{ 4, 4},{ 5, 6},{ 6, 8},{ 6, 4},{ 7, 4},{ 9, 4},{11,12},{11, 8},{12,12},{13,12},{13, 8},{13, 1},{14, 4}},
        },                                                 
        {                                                  
            {{ 4,15},{ 6,15},{ 6,11},{ 6, 8},{ 7,15},{ 7,11},{ 7, 9},{ 7, 8},{ 8,15},{ 8,11},{ 9,15},{ 9,11},{ 9, 8},{10,13},{10, 9},{10, 5},{10, 1}},
            {{ 0, 0},{ 4,14},{ 5,15},{ 5,12},{ 5,10},{ 5, 8},{ 6,14},{ 6,10},{ 7,14},{ 8,14},{ 8,10},{ 9,14},{ 9,10},{ 9, 7},{10,12},{10, 8},{10, 4}},
            {{ 0, 0},{ 0, 0},{ 4,13},{ 5,14},{ 5,11},{ 5, 9},{ 6,13},{ 6, 9},{ 7,13},{ 7,10},{ 8,13},{ 8, 9},{ 9,13},{ 9, 9},{10,11},{10, 7},{10, 3}},
            {{ 0, 0},{ 0, 0},{ 0, 0},{ 4,12},{ 4,11},{ 4,10},{ 4, 9},{ 4, 8},{ 5,13},{ 6,12},{ 7,12},{ 8,12},{ 8, 8},{ 9,12},{10,10},{10, 6},{10, 2}},
        }
    };

const unsigned char CoeffTokenChromaDCTable[4][5][2] =
    {
        {{2,1},{6,7},{6,4},{6,3},{6,2}},          
        {{0,0},{1,1},{6,6},{7,3},{8,3}}, 
        {{0,0},{0,0},{3,1},{7,2},{8,2}}, 
        {{0,0},{0,0},{0,0},{6,5},{7,0}}
    };

const unsigned char RunTable[44][2] =
    {
        {1,1},{1,0},{1,1},{2,1},{2,0},{2,3},{2,2},{2,1},{2,0},{2,3},{2,2},{2,1},{3,1},{3,0},{2,3},{2,2},{3,3},
        {3,2},{3,1},{3,0},{2,3},{3,0},{3,1},{3,3},{3,2},{3,5},{3,4},{3,7},{3,6},{3,5},{3,4},{3,3},{3,2},
        {3,1},{4,1},{5,1},{6,1},{7,1},{8,1},{9,1},{10,1},{11,1},{0,0}
    };

const unsigned int RunIndexTable[7] =
    {
        0x0, 0x2, 0x5, 0x9, 0xe, 0x14, 0x1b
    };
		
const unsigned char TotalZerosTable[15][16][2] =
    {
        {{1,1},{3,3},{3,2},{4,3},{4,2},{5,3},{5,2},{6,3},{6,2},{7,3},{7,2},{8,3},{8,2},{9,3},{9,2},{9,1}},  
        {{3,7},{3,6},{3,5},{3,4},{3,3},{4,5},{4,4},{4,3},{4,2},{5,3},{5,2},{6,3},{6,2},{6,1},{6,0} ,{0,0}},  
        {{4,5},{3,7},{3,6},{3,5},{4,4},{4,3},{3,4},{3,3},{4,2},{5,3},{5,2},{6,1},{5,1},{6,0} ,{0,0},{0,0}},  
        {{5,3},{3,7},{4,5},{4,4},{3,6},{3,5},{3,4},{4,3},{3,3},{4,2},{5,2},{5,1},{5,0} ,{0,0},{0,0},{0,0}},  
        {{4,5},{4,4},{4,3},{3,7},{3,6},{3,5},{3,4},{3,3},{4,2},{5,1},{4,1},{5,0} ,{0,0},{0,0},{0,0},{0,0}},  
        {{6,1},{5,1},{3,7},{3,6},{3,5},{3,4},{3,3},{3,2},{4,1},{3,1},{6,0} ,{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{6,1},{5,1},{3,5},{3,4},{3,3},{2,3},{3,2},{4,1},{3,1},{6,0} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{6,1},{4,1},{5,1},{3,3},{2,3},{2,2},{3,2},{3,1},{6,0} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{6,1},{6,0},{4,1},{2,3},{2,2},{3,1},{2,1},{5,1} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{5,1},{5,0},{3,1},{2,3},{2,2},{2,1},{4,1} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{4,0},{4,1},{3,1},{3,2},{1,1},{3,3} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{4,0},{4,1},{2,1},{1,1},{3,1} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{3,0},{3,1},{1,1},{2,1} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{2,0},{2,1},{1,1} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
        {{1,0},{1,1} ,{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}},  
    };

const unsigned char TotalZerosChromaDCTable[3][4][2] =
    {
        {{1,1},{2,1},{3,1},{3,0}},
        {{1,1},{2,1},{2,0},{0,0}},
        {{1,1},{1,0},{0,0},{0,0}} 
    };

 
const unsigned char CBPTable[48][2] =
    {
        { 3, 0},{29, 2},{30, 3},{17, 7},{31, 4},{18, 8},{37,17},{ 8,13},{32, 5},{38,18},{19, 9},{ 9,14},
        {20,10},{10,15},{11,16},{ 2,11},{16, 1},{33,32},{34,33},{21,36},{35,34},{22,37},{39,44},{ 4,40},
        {36,35},{40,45},{23,38},{ 5,41},{24,39},{ 6,42},{ 7,43},{ 1,19},{41, 6},{42,24},{43,25},{25,20},
        {44,26},{26,21},{46,46},{12,28},{45,27},{47,47},{27,22},{13,29},{28,23},{14,30},{15,31},{ 0,12},
    };
